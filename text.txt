from django.contrib import admin
from django.contrib.auth import get_user_model


User = get_user_model()

class UserAdmin(admin.ModelAdmin):
    list_display = ('first_name', 'last_name', 'email', 'is_active')
    list_filter = ('is_active',)
    search_fields = ('email',)

admin.site.register(User, UserAdmin)



from django.apps import AppConfig


class AccountConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'account'
    verbose_name = "Пользователи" 


from django.db import models
from django.utils.crypto import get_random_string
from django.contrib.auth.models import AbstractUser
from django.contrib.auth.base_user import BaseUserManager


class UserManager(BaseUserManager):
    def _create_user(self, email, password, **extra):
        if not email:
            raise ValueError("Email field is required")            
        email = self.normalize_email(email)
        user = self.model(email=email, **extra)
        user.set_password(password)
        user.save()
        return user

    def create_user(self, email, password, **extra):
        user = self._create_user(email, password, **extra)
        user.create_activation_code()
        user.save()
        return user

    def create_superuser(self, email, password, **extra):
        extra.setdefault("is_staff", True)
        extra.setdefault("is_active", True)
        extra.setdefault("is_superuser", True)
        user = self._create_user(email, password, **extra)
        return user

  
class User(AbstractUser):
    username = None
    email = models.EmailField(unique=True, verbose_name='Почта')
    is_active = models.BooleanField(default=False, verbose_name='Активен')
    activation_code = models.CharField(max_length=10, blank=True)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    objects = UserManager()

    def str(self):
        return self.email

    def create_activation_code(self):
        code = get_random_string(length=10, allowed_chars="1234567890")
        self.activation_code = code
    
    class Meta:
        verbose_name = "Пользователя" 
        verbose_name_plural = "Пользователи" 


from django.contrib.auth import get_user_model
from django.contrib.auth.tokens import PasswordResetTokenGenerator
from rest_framework import serializers

from .tasks import send_activation_code, send_password_reset_link, create_reset_url


User = get_user_model()


class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(
        min_length=4,
        required=True,
        write_only=True,
    )
    password_confirm = serializers.CharField(
        min_length=4,
        required=True,
        write_only=True,
    )

    class Meta:
        model = User
        fields = "email", "password", "password_confirm"

    def validate(self, attrs):
        p1 = attrs.get("password")
        p2 = attrs.pop("password_confirm")

        if p1 != p2:
            raise serializers.ValidationError("Пароли не совпадают")
        return attrs

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        send_activation_code(user.email, user.activation_code)
        return user


class EmailSerializer(serializers.Serializer):
    email = serializers.EmailField()

    class Meta:
        fields = ["email"]


class PasswordResetSerializer(serializers.Serializer):
    password = serializers.CharField(
        write_only=True,
        min_length=4,
    )

    class Meta:
        fields = ["password"]

    def validate(self, data):
        password = data.get("password")
        token = self.context.get("kwargs").get("token")
        pk = self.context.get("kwargs").get("pk")
        if not token or not pk:
            raise  serializers.ValidationError("Нет данных")
            
        user = User.objects.get(pk=pk)

        if not PasswordResetTokenGenerator().check_token(user, token):
            raise serializers.ValidationError("Неверный токен для изменеия")

        user.set_password(password)
        user.save()
        return data
    


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['email', 'is_active']



from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.urls import reverse

from celery import shared_task


@shared_task
def send_activation_code(email, activation_code):
    context = {
        "text_detail": "Спасибо за регистрацию",
        "email": email,
        "domain": "http://127.0.0.1:8000/",
        "activation_code": activation_code,
    }
    msg_html = render_to_string("email.html", context)
    message = strip_tags(msg_html)
    send_mail(
        "Account activation",
        message,
        "admin@admin.com",
        [email],
        html_message=msg_html,
        fail_silently=False,
    )



def send_password_reset_link(email, link):
    context = {
        "email": email,
        "link": link,
    }
    msg_html = render_to_string("password_reset.html", context)
    message = strip_tags(msg_html)
    send_mail(
        "Password reset",
        message,
        "admin@admin.com",
        [email],
        html_message=msg_html,
        fail_silently=False,
    )


def create_reset_url(pk, token):
    reset_url = reverse(
            "password_reset",
            kwargs={"pk": pk, "token": token}
        )
    reset_url = f"http://localhost:8000{reset_url}"
    
    return reset_url



from django.urls import path
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

from .views import RegisterView, ActivationView, PasswordReset, PasswordResetView, UserListView


urlpatterns = [
    path("register/", RegisterView.as_view()),
    path(
        "activate/<str:email>/<str:activation_code>/",
        ActivationView.as_view(),
        name="activate",
    ),
    path("login/", TokenObtainPairView.as_view()),
    path("refresh/", TokenRefreshView.as_view()),
    path("password_reset/", PasswordReset.as_view()),
    path(
        "password_reset/<str:pk>/<str:token>/",
        PasswordResetView.as_view(),
        name="password_reset",
    ),
    path('users/', UserListView.as_view()),
]



from django.contrib.auth import get_user_model
from django.contrib.auth.tokens import PasswordResetTokenGenerator
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework import generics
from drf_yasg.utils import swagger_auto_schema
from rest_framework import generics

from .serializers import RegisterSerializer, EmailSerializer, PasswordResetSerializer, UserSerializer
from .tasks import create_reset_url, send_password_reset_link


User = get_user_model()


class RegisterView(APIView):
    @swagger_auto_schema(request_body=RegisterSerializer())
    def post(self, request):
        data = request.data
        serializer = RegisterSerializer(data=data)
        if serializer.is_valid(raise_exception=True):
            serializer.save()
        return Response("Вы успешно зарегистрировались", 201)


class ActivationView(APIView):
    def get(self, request, email, activation_code):
        user = User.objects.filter(email=email, activation_code=activation_code).first()
        if not user:
            return Response("Пользователь не найден", 404)
        user.activation_code = ""
        user.is_active = True
        user.save()
        return Response("Вы успешно активировали аккаунт")


class PasswordReset(generics.GenericAPIView):
    queryset = User.objects.all()
    serializer_class = EmailSerializer

    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        email = serializer.data["email"]
        user = User.objects.filter(email=email).first()
        if  not user:
            return Response("Пользователь не найден", 404)
        pk = user.pk
        token = PasswordResetTokenGenerator().make_token(user)
        link = create_reset_url(pk, token)
        send_password_reset_link(email, link)

        return Response(f"Ваша ссылка для изменения пароля {link}",
            200)


class PasswordResetView(generics.GenericAPIView):
    queryset = User.objects.all()
    serializer_class = PasswordResetSerializer

    def patch(self, request, *args, **kwargs):
        pk = kwargs.get("pk", None)
        if not pk:
            return Response({"error": "Method PUT not allowed"})

        try:
            instance = User.objects.get(pk=pk)
        except:
            return Response("User does not exist", 404)

        serializer = self.serializer_class(
            data=request.data,
            context={"kwargs": kwargs}
        )
        serializer.is_valid(raise_exception=True)

        return Response("Ваш пароль успешно изменён")
    


class UserListView(generics.ListAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
